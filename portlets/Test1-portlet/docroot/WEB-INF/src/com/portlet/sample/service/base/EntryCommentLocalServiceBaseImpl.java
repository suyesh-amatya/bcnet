/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portlet.sample.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.portlet.sample.model.EntryComment;
import com.portlet.sample.service.EntryCommentLocalService;
import com.portlet.sample.service.persistence.EntryCommentPersistence;
import com.portlet.sample.service.persistence.SampleEntryPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the entry comment local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.portlet.sample.service.impl.EntryCommentLocalServiceImpl}.
 * </p>
 *
 * @author Scalsysu5
 * @see com.portlet.sample.service.impl.EntryCommentLocalServiceImpl
 * @see com.portlet.sample.service.EntryCommentLocalServiceUtil
 * @generated
 */
public abstract class EntryCommentLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements EntryCommentLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.portlet.sample.service.EntryCommentLocalServiceUtil} to access the entry comment local service.
	 */

	/**
	 * Adds the entry comment to the database. Also notifies the appropriate model listeners.
	 *
	 * @param entryComment the entry comment
	 * @return the entry comment that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EntryComment addEntryComment(EntryComment entryComment)
		throws SystemException {
		entryComment.setNew(true);

		return entryCommentPersistence.update(entryComment);
	}

	/**
	 * Creates a new entry comment with the primary key. Does not add the entry comment to the database.
	 *
	 * @param commentId the primary key for the new entry comment
	 * @return the new entry comment
	 */
	@Override
	public EntryComment createEntryComment(long commentId) {
		return entryCommentPersistence.create(commentId);
	}

	/**
	 * Deletes the entry comment with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param commentId the primary key of the entry comment
	 * @return the entry comment that was removed
	 * @throws PortalException if a entry comment with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EntryComment deleteEntryComment(long commentId)
		throws PortalException, SystemException {
		return entryCommentPersistence.remove(commentId);
	}

	/**
	 * Deletes the entry comment from the database. Also notifies the appropriate model listeners.
	 *
	 * @param entryComment the entry comment
	 * @return the entry comment that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EntryComment deleteEntryComment(EntryComment entryComment)
		throws SystemException {
		return entryCommentPersistence.remove(entryComment);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EntryComment.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return entryCommentPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.portlet.sample.model.impl.EntryCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return entryCommentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.portlet.sample.model.impl.EntryCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return entryCommentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return entryCommentPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return entryCommentPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EntryComment fetchEntryComment(long commentId)
		throws SystemException {
		return entryCommentPersistence.fetchByPrimaryKey(commentId);
	}

	/**
	 * Returns the entry comment with the matching UUID and company.
	 *
	 * @param uuid the entry comment's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching entry comment, or <code>null</code> if a matching entry comment could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EntryComment fetchEntryCommentByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return entryCommentPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the entry comment matching the UUID and group.
	 *
	 * @param uuid the entry comment's UUID
	 * @param groupId the primary key of the group
	 * @return the matching entry comment, or <code>null</code> if a matching entry comment could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EntryComment fetchEntryCommentByUuidAndGroupId(String uuid,
		long groupId) throws SystemException {
		return entryCommentPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the entry comment with the primary key.
	 *
	 * @param commentId the primary key of the entry comment
	 * @return the entry comment
	 * @throws PortalException if a entry comment with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EntryComment getEntryComment(long commentId)
		throws PortalException, SystemException {
		return entryCommentPersistence.findByPrimaryKey(commentId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return entryCommentPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the entry comment with the matching UUID and company.
	 *
	 * @param uuid the entry comment's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching entry comment
	 * @throws PortalException if a matching entry comment could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EntryComment getEntryCommentByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException, SystemException {
		return entryCommentPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the entry comment matching the UUID and group.
	 *
	 * @param uuid the entry comment's UUID
	 * @param groupId the primary key of the group
	 * @return the matching entry comment
	 * @throws PortalException if a matching entry comment could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EntryComment getEntryCommentByUuidAndGroupId(String uuid,
		long groupId) throws PortalException, SystemException {
		return entryCommentPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the entry comments.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.portlet.sample.model.impl.EntryCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of entry comments
	 * @param end the upper bound of the range of entry comments (not inclusive)
	 * @return the range of entry comments
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<EntryComment> getEntryComments(int start, int end)
		throws SystemException {
		return entryCommentPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of entry comments.
	 *
	 * @return the number of entry comments
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getEntryCommentsCount() throws SystemException {
		return entryCommentPersistence.countAll();
	}

	/**
	 * Updates the entry comment in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param entryComment the entry comment
	 * @return the entry comment that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EntryComment updateEntryComment(EntryComment entryComment)
		throws SystemException {
		return entryCommentPersistence.update(entryComment);
	}

	/**
	 * Returns the entry comment local service.
	 *
	 * @return the entry comment local service
	 */
	public com.portlet.sample.service.EntryCommentLocalService getEntryCommentLocalService() {
		return entryCommentLocalService;
	}

	/**
	 * Sets the entry comment local service.
	 *
	 * @param entryCommentLocalService the entry comment local service
	 */
	public void setEntryCommentLocalService(
		com.portlet.sample.service.EntryCommentLocalService entryCommentLocalService) {
		this.entryCommentLocalService = entryCommentLocalService;
	}

	/**
	 * Returns the entry comment remote service.
	 *
	 * @return the entry comment remote service
	 */
	public com.portlet.sample.service.EntryCommentService getEntryCommentService() {
		return entryCommentService;
	}

	/**
	 * Sets the entry comment remote service.
	 *
	 * @param entryCommentService the entry comment remote service
	 */
	public void setEntryCommentService(
		com.portlet.sample.service.EntryCommentService entryCommentService) {
		this.entryCommentService = entryCommentService;
	}

	/**
	 * Returns the entry comment persistence.
	 *
	 * @return the entry comment persistence
	 */
	public EntryCommentPersistence getEntryCommentPersistence() {
		return entryCommentPersistence;
	}

	/**
	 * Sets the entry comment persistence.
	 *
	 * @param entryCommentPersistence the entry comment persistence
	 */
	public void setEntryCommentPersistence(
		EntryCommentPersistence entryCommentPersistence) {
		this.entryCommentPersistence = entryCommentPersistence;
	}

	/**
	 * Returns the sample entry local service.
	 *
	 * @return the sample entry local service
	 */
	public com.portlet.sample.service.SampleEntryLocalService getSampleEntryLocalService() {
		return sampleEntryLocalService;
	}

	/**
	 * Sets the sample entry local service.
	 *
	 * @param sampleEntryLocalService the sample entry local service
	 */
	public void setSampleEntryLocalService(
		com.portlet.sample.service.SampleEntryLocalService sampleEntryLocalService) {
		this.sampleEntryLocalService = sampleEntryLocalService;
	}

	/**
	 * Returns the sample entry remote service.
	 *
	 * @return the sample entry remote service
	 */
	public com.portlet.sample.service.SampleEntryService getSampleEntryService() {
		return sampleEntryService;
	}

	/**
	 * Sets the sample entry remote service.
	 *
	 * @param sampleEntryService the sample entry remote service
	 */
	public void setSampleEntryService(
		com.portlet.sample.service.SampleEntryService sampleEntryService) {
		this.sampleEntryService = sampleEntryService;
	}

	/**
	 * Returns the sample entry persistence.
	 *
	 * @return the sample entry persistence
	 */
	public SampleEntryPersistence getSampleEntryPersistence() {
		return sampleEntryPersistence;
	}

	/**
	 * Sets the sample entry persistence.
	 *
	 * @param sampleEntryPersistence the sample entry persistence
	 */
	public void setSampleEntryPersistence(
		SampleEntryPersistence sampleEntryPersistence) {
		this.sampleEntryPersistence = sampleEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.portlet.sample.model.EntryComment",
			entryCommentLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.portlet.sample.model.EntryComment");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return EntryComment.class;
	}

	protected String getModelClassName() {
		return EntryComment.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = entryCommentPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.portlet.sample.service.EntryCommentLocalService.class)
	protected com.portlet.sample.service.EntryCommentLocalService entryCommentLocalService;
	@BeanReference(type = com.portlet.sample.service.EntryCommentService.class)
	protected com.portlet.sample.service.EntryCommentService entryCommentService;
	@BeanReference(type = EntryCommentPersistence.class)
	protected EntryCommentPersistence entryCommentPersistence;
	@BeanReference(type = com.portlet.sample.service.SampleEntryLocalService.class)
	protected com.portlet.sample.service.SampleEntryLocalService sampleEntryLocalService;
	@BeanReference(type = com.portlet.sample.service.SampleEntryService.class)
	protected com.portlet.sample.service.SampleEntryService sampleEntryService;
	@BeanReference(type = SampleEntryPersistence.class)
	protected SampleEntryPersistence sampleEntryPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private EntryCommentLocalServiceClpInvoker _clpInvoker = new EntryCommentLocalServiceClpInvoker();
}