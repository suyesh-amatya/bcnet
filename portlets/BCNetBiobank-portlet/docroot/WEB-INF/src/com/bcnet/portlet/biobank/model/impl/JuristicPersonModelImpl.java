/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bcnet.portlet.biobank.model.impl;

import com.bcnet.portlet.biobank.model.JuristicPerson;
import com.bcnet.portlet.biobank.model.JuristicPersonModel;
import com.bcnet.portlet.biobank.model.JuristicPersonSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the JuristicPerson service. Represents a row in the &quot;juristicperson&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bcnet.portlet.biobank.model.JuristicPersonModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JuristicPersonImpl}.
 * </p>
 *
 * @author suyama
 * @see JuristicPersonImpl
 * @see com.bcnet.portlet.biobank.model.JuristicPerson
 * @see com.bcnet.portlet.biobank.model.JuristicPersonModel
 * @generated
 */
@JSON(strict = true)
public class JuristicPersonModelImpl extends BaseModelImpl<JuristicPerson>
	implements JuristicPersonModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a juristic person model instance should use the {@link com.bcnet.portlet.biobank.model.JuristicPerson} interface instead.
	 */
	public static final String TABLE_NAME = "juristicperson";
	public static final Object[][] TABLE_COLUMNS = {
			{ "juristicPersonId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "address", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table juristicperson (juristicPersonId LONG not null primary key,name VARCHAR(75) null,url VARCHAR(75) null,address VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table juristicperson";
	public static final String ORDER_BY_JPQL = " ORDER BY juristicPerson.juristicPersonId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY juristicperson.juristicPersonId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bcnet.portlet.biobank.model.JuristicPerson"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bcnet.portlet.biobank.model.JuristicPerson"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static JuristicPerson toModel(JuristicPersonSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		JuristicPerson model = new JuristicPersonImpl();

		model.setJuristicPersonId(soapModel.getJuristicPersonId());
		model.setName(soapModel.getName());
		model.setUrl(soapModel.getUrl());
		model.setAddress(soapModel.getAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<JuristicPerson> toModels(JuristicPersonSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<JuristicPerson> models = new ArrayList<JuristicPerson>(soapModels.length);

		for (JuristicPersonSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bcnet.portlet.biobank.model.JuristicPerson"));

	public JuristicPersonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _juristicPersonId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJuristicPersonId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _juristicPersonId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JuristicPerson.class;
	}

	@Override
	public String getModelClassName() {
		return JuristicPerson.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("juristicPersonId", getJuristicPersonId());
		attributes.put("name", getName());
		attributes.put("url", getUrl());
		attributes.put("address", getAddress());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long juristicPersonId = (Long)attributes.get("juristicPersonId");

		if (juristicPersonId != null) {
			setJuristicPersonId(juristicPersonId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}
	}

	@JSON
	@Override
	public long getJuristicPersonId() {
		return _juristicPersonId;
	}

	@Override
	public void setJuristicPersonId(long juristicPersonId) {
		_juristicPersonId = juristicPersonId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			JuristicPerson.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JuristicPerson toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (JuristicPerson)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JuristicPersonImpl juristicPersonImpl = new JuristicPersonImpl();

		juristicPersonImpl.setJuristicPersonId(getJuristicPersonId());
		juristicPersonImpl.setName(getName());
		juristicPersonImpl.setUrl(getUrl());
		juristicPersonImpl.setAddress(getAddress());

		juristicPersonImpl.resetOriginalValues();

		return juristicPersonImpl;
	}

	@Override
	public int compareTo(JuristicPerson juristicPerson) {
		long primaryKey = juristicPerson.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof JuristicPerson)) {
			return false;
		}

		JuristicPerson juristicPerson = (JuristicPerson)obj;

		long primaryKey = juristicPerson.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<JuristicPerson> toCacheModel() {
		JuristicPersonCacheModel juristicPersonCacheModel = new JuristicPersonCacheModel();

		juristicPersonCacheModel.juristicPersonId = getJuristicPersonId();

		juristicPersonCacheModel.name = getName();

		String name = juristicPersonCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			juristicPersonCacheModel.name = null;
		}

		juristicPersonCacheModel.url = getUrl();

		String url = juristicPersonCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			juristicPersonCacheModel.url = null;
		}

		juristicPersonCacheModel.address = getAddress();

		String address = juristicPersonCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			juristicPersonCacheModel.address = null;
		}

		return juristicPersonCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{juristicPersonId=");
		sb.append(getJuristicPersonId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.bcnet.portlet.biobank.model.JuristicPerson");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>juristicPersonId</column-name><column-value><![CDATA[");
		sb.append(getJuristicPersonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = JuristicPerson.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			JuristicPerson.class
		};
	private long _juristicPersonId;
	private String _name;
	private String _url;
	private String _address;
	private JuristicPerson _escapedModel;
}