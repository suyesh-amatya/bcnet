/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bcnet.portlet.biobank.model.impl;

import com.bcnet.portlet.biobank.model.SampleImportLog;
import com.bcnet.portlet.biobank.model.SampleImportLogModel;
import com.bcnet.portlet.biobank.model.SampleImportLogSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SampleImportLog service. Represents a row in the &quot;sampleimportlog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bcnet.portlet.biobank.model.SampleImportLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SampleImportLogImpl}.
 * </p>
 *
 * @author suyama
 * @see SampleImportLogImpl
 * @see com.bcnet.portlet.biobank.model.SampleImportLog
 * @see com.bcnet.portlet.biobank.model.SampleImportLogModel
 * @generated
 */
@JSON(strict = true)
public class SampleImportLogModelImpl extends BaseModelImpl<SampleImportLog>
	implements SampleImportLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sample import log model instance should use the {@link com.bcnet.portlet.biobank.model.SampleImportLog} interface instead.
	 */
	public static final String TABLE_NAME = "sampleimportlog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "importId", Types.BIGINT },
			{ "fileName", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "dateOfImport", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table sampleimportlog (uuid_ VARCHAR(75) null,importId LONG not null primary key,fileName VARCHAR(75) null,userId LONG,dateOfImport DATE null)";
	public static final String TABLE_SQL_DROP = "drop table sampleimportlog";
	public static final String ORDER_BY_JPQL = " ORDER BY sampleImportLog.importId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sampleimportlog.importId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bcnet.portlet.biobank.model.SampleImportLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bcnet.portlet.biobank.model.SampleImportLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bcnet.portlet.biobank.model.SampleImportLog"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;
	public static long IMPORTID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SampleImportLog toModel(SampleImportLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SampleImportLog model = new SampleImportLogImpl();

		model.setUuid(soapModel.getUuid());
		model.setImportId(soapModel.getImportId());
		model.setFileName(soapModel.getFileName());
		model.setUserId(soapModel.getUserId());
		model.setDateOfImport(soapModel.getDateOfImport());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SampleImportLog> toModels(
		SampleImportLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SampleImportLog> models = new ArrayList<SampleImportLog>(soapModels.length);

		for (SampleImportLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bcnet.portlet.biobank.model.SampleImportLog"));

	public SampleImportLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _importId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _importId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SampleImportLog.class;
	}

	@Override
	public String getModelClassName() {
		return SampleImportLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("importId", getImportId());
		attributes.put("fileName", getFileName());
		attributes.put("userId", getUserId());
		attributes.put("dateOfImport", getDateOfImport());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long importId = (Long)attributes.get("importId");

		if (importId != null) {
			setImportId(importId);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date dateOfImport = (Date)attributes.get("dateOfImport");

		if (dateOfImport != null) {
			setDateOfImport(dateOfImport);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getImportId() {
		return _importId;
	}

	@Override
	public void setImportId(long importId) {
		_importId = importId;
	}

	@JSON
	@Override
	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getDateOfImport() {
		return _dateOfImport;
	}

	@Override
	public void setDateOfImport(Date dateOfImport) {
		_dateOfImport = dateOfImport;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SampleImportLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SampleImportLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SampleImportLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SampleImportLogImpl sampleImportLogImpl = new SampleImportLogImpl();

		sampleImportLogImpl.setUuid(getUuid());
		sampleImportLogImpl.setImportId(getImportId());
		sampleImportLogImpl.setFileName(getFileName());
		sampleImportLogImpl.setUserId(getUserId());
		sampleImportLogImpl.setDateOfImport(getDateOfImport());

		sampleImportLogImpl.resetOriginalValues();

		return sampleImportLogImpl;
	}

	@Override
	public int compareTo(SampleImportLog sampleImportLog) {
		long primaryKey = sampleImportLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SampleImportLog)) {
			return false;
		}

		SampleImportLog sampleImportLog = (SampleImportLog)obj;

		long primaryKey = sampleImportLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SampleImportLogModelImpl sampleImportLogModelImpl = this;

		sampleImportLogModelImpl._originalUuid = sampleImportLogModelImpl._uuid;

		sampleImportLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SampleImportLog> toCacheModel() {
		SampleImportLogCacheModel sampleImportLogCacheModel = new SampleImportLogCacheModel();

		sampleImportLogCacheModel.uuid = getUuid();

		String uuid = sampleImportLogCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			sampleImportLogCacheModel.uuid = null;
		}

		sampleImportLogCacheModel.importId = getImportId();

		sampleImportLogCacheModel.fileName = getFileName();

		String fileName = sampleImportLogCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			sampleImportLogCacheModel.fileName = null;
		}

		sampleImportLogCacheModel.userId = getUserId();

		Date dateOfImport = getDateOfImport();

		if (dateOfImport != null) {
			sampleImportLogCacheModel.dateOfImport = dateOfImport.getTime();
		}
		else {
			sampleImportLogCacheModel.dateOfImport = Long.MIN_VALUE;
		}

		return sampleImportLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", importId=");
		sb.append(getImportId());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", dateOfImport=");
		sb.append(getDateOfImport());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.bcnet.portlet.biobank.model.SampleImportLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importId</column-name><column-value><![CDATA[");
		sb.append(getImportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfImport</column-name><column-value><![CDATA[");
		sb.append(getDateOfImport());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SampleImportLog.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SampleImportLog.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _importId;
	private String _fileName;
	private long _userId;
	private String _userUuid;
	private Date _dateOfImport;
	private long _columnBitmask;
	private SampleImportLog _escapedModel;
}